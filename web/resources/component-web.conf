#
# Made with all the love in the world
# by scireum in Remshalden, Germany
#
# Copyright by scireum GmbH
# http://www.scireum.de - info@scireum.de
#

sirius.frameworks {
    # Enables the built-in web server based on netty
    http = true

    # Enables server sided scripting. Disabled by default so that the scripting engine is only powered on if
    # required
    server-scripting = false
}

# Contains the configuration for the web / http module
http {
    # Contains the port used for HTTP communication. The default value specified by HTTP is 80. We use 9000 since a
    # non root user cannot open a port below 1024
    port = 9000

    # Can be used to force netty to bind only on the given address. This permits to run multiple servers on the same
    # port. If the value is empty, we bind all addressed.
    bindAddress = ""

    # Specifies the size until which an upload is kept entirely in memory
    uploadDiskThreshold = 1M

    # Specifies the min free size on disk. If the free space drops below this limit, the corresponding upload will
    # be canceled.
    minUploadFreespace = 100M

    # Maximal size of an upload which can be sent to the server
    maxUploadSize = 5G

    # Maximal size of structured data (XML / JSON) which is accepted by the server. As this data is completely held
    # in memory, this value should not be too large.
    maxStructuredInputSize = 10M

    # Determines how long a channel can be idle before it is forcefully closed
    idleTimeout = 60 seconds

    # Specifies the context / path prefix. Setting a value here, makes the app behave like it would be running in a
    # sub directory.
    contextPrefix = ""

    # Determines if a P3P fake header disabling all p3p checks in Internet Explorer (which is one of the last user
    # agents caring about that). A detailed description of P3P can be found here: http://en.wikipedia.org/wiki/P3P
    addP3PHeader = true

    # Specifies the name of the cookie which contains the client session
    sessionCookieName = "SIRIUS_SESSION"

    # Specifies the secret used to validate the consistency of client sessions. If no value is present (default)
    # a random secret is created on startup. However this implies that sessions do not work across clusters
    # or across server restart. Therefore its a good idea to provide a fixed secret here. The value should be
    # reasonable long and cryptographically computed - rather than your dogs name ;-)
    sessionSecret = ""

    # Specifies the lifetime of short server sessions which where just created but not re-accessed yet. Using a shorter
    # timeout here permits to get rid of sessions accidently started by bots. The term lifetime might be a bit
    # misleading as this value actually specifies the maximal idle time until a session is eligible for invalidation.
    serverMiniSessionLifetime = 5 minutes

    # Specifies the lifetime of server sessions. The term lifetime might be a bit misleading as this value actually
    # specifies the maximal idle time until a session is eligible for invalidation.
    serverSessionLifetime = 30 minutes

    # Specifies the parameter name which is used to transfer the id of the server session
    serverSessionParameterName = "JSESSIONID"

    # Specifies the cookie name which is used to transfer the id of the server session
    serverSessionCookieName = "JSESSIONID"

    # Should a default crossdomain.xml be served?
    crossdomain.xml.enabled = true

    # Should a default robots.txt be served?
    robots.txt.enabled = true

    # Accept search engines? (By default we don't allow any indexing, therefore disallow is true).
    robots.txt.disallow = true

    # Contains the name of the directory used to cache generated content like CSS files computed from SCSS files.
    # Will be created if it does not exist.
    generated-directory = "web-cache"

    # Configuration of the service sub system which provides structured services via XML and JSON
    services {

    }

    # Configures the built-in firewall for the HTTP interface
    firewall {
        # A list of ip addresses or sub nets in CIDR notation can be named here, to limit the set of accepted IPs
        # If an address or a list of addresses is given, no IPs outside of this list will be accepted.
        # CIDR notation contains the IP, followed by the number of relevant bits, e.g.: 192.168.0.0/16
        # Separate multiple entries with a ",", e.g.: 192.168.192.1/32,192.168.168.0/24
        filterIPs = ""

        # Contains a list of ip addresses or sub nets which are "trusted" by the system. The notation used is the
        # same as for filterIPs.
        trustedIPS = ""

        # Contains one or more ip addresses of proxy servers. If a request from a proxy server is received, the
        # X-Forwarded-For header is used to determine the originating ip for the request. The notation used is the same
        # as for filterIPs.
        proxyIPs = ""
    }

}

# Configures the help system
help {
    # Determines which index page will be used
    indexTemplate = index
}

# Configures the system health monitoring
health {
    # Determines the base directory for the metrics database
    metrics-basedir = "metrics"

    # Determines settings for the MemoryBasedHealthMonitor, which provides logs and error reporting
    # if no other LogTap or ExceptionHandler is installed. This is also used to report how many
    # logs / min and exceptions / min occur.
    memory {
        # Max number of exceptions to keep in ram (can be viewed via http://.../system/errors)
        max-errors = 100

        # Max number of logs to keep in ram (can be viewed via http://.../system/logs)
        max-logs = 100
    }


    # Defines limits for all collected metrics which will cause the system state to be set appropriately
    # Note that 0 means "no limit". Also all given limits are best guesses and depend heavily on the application
    # and the machine the software is running on. The given values are always "per minute" or in percents.
    # .gray always defines a limit where everything below is considered "uninteresting" (GRAY). Everything above
    # .warn and below .warning is "ok" (GREEN). Everything above .warning and below .error is "warning" (YELLOW) and
    # indicates that a metric is in a critical region. Everything above .red is "error" (RED) and signals a failure
    # condition. Using "0" for any value disable the respective limit.
    limits {
        # Number of log lines written per minute
        sys-logs.gray = 10
        sys-logs.warning = 100
        sys-logs.error = 0

        # Number of unique incidents (from different locations)
        sys-incidents.gray = 1
        sys-incidents.warning = 1000
        sys-incidents.error = 0

        # Number of unique incidents (from different locations)
        sys-unique-incidents.gray = 1
        sys-unique-incidents.warning = 10
        sys-unique-incidents.error = 25

        # Overall CPU utilization in %
        sys-cpu.gray = 15
        sys-cpu.warning = 90
        sys-cpu.error = 0

        # Ram utilization in %
        # We ignore most of the values as memory is always used as buffer etc. So one has to read this
        # metric with a grain of salt
        sys-mem.gray = 90

        # Filesystem usage in %
        sys-fs.gray = 80
        sys-fs.warning = 80
        sys-fs.error = 95

        # Outgoing network bandwidth
        sys-eth-tx.gray = 500
        sys-eth-tx.yellow = 0
        sys-eth-tx.red = 0

        # Incoming network bandwidth
        sys-eth-rx.gray = 500
        sys-eth-rx.yellow = 0
        sys-eth-rx.red = 0

        # CPU utilization caused by the JVM in %
        jvm-cpu.gray = 10
        jvm-cpu.warning = 80
        jvm-cpu.error = 99

        # Heap usage in %
        jvm-heap.gray = 50
        jvm-heap.warning = 60
        jvm-heap.error = 90

        # Number of garbage collections performed
        jvm-gc.gray = 25
        jvm-gc.warn = 100
        jvm-gc.error = 0

        # Number of tasks / events processed by the system
        sys-interactions.gray = 250
        sys-interactions.warning = 0
        sys-interactions.error = 0

        # Number of HTTP requests per minute
        http-requests.gray = 100
        http-requests.warning = 0
        http-requests.error = 0

        # Number of blocked requests (by the firewall) per minute
        http-blocks.gray = 1
        http-blocks.warning = 15
        http-blocks.error = 0

        # Number of killed requests due to idle state (per minute)
        http-timeouts.gray = 1
        http-timeouts.warning = 15
        http-timeouts.error = 0

        # Number of HTTP 4xx status codes replied per minute
        http-client-errors.gray = 10
        http-client-errors.warning = 250
        http-client-errors.error = 0

        # Number of HTTP 5xx status codes replied per minute
        http-server-errors.gray = 1
        http-server-errors.warning = 15
        http-server-errors.error = 0

        # Number of currently open connections
        http-open-connections.gray = 2
        http-open-connections.warning = 50
        http-open-connections.error = 0

        # Average response time in milliseconds
        http-response-time.gray = 250
        http-response-time.warning = 500
        http-response-time.error = 2000

        # Number of server sided sessions currently open
        http-sessions.gray = 100
        http-sessions.warning = 500
        http-sessions.error = 0

        # Incoming HTTP bandwidth
        http-bytes-in.gray = 500
        http-bytes-in.warning = 0
        http-bytes-in.error = 0

        # Outgoing HTTP bandwidth
        http-bytes-out.gray = 500
        http-bytes-out.warning = 0
        http-bytes-out.error = 0

        # HTTP Connections opened
        http-connects.gray = 100
        http-connects.warning = 0
        http-connects.error = 0

        # JDBC query duration
        db-query-duration.gray = 10
        db-query-duration.warn = 500
        db-query-duration.error = 0

        # JDBC connection pool utilization
        db-uses.gray = 25
        db-uses.warn = 0
        db-uses.error = 0

        # JDBC queries
        db-queries.gray = 25
        db-queries.warn = 0
        db-queries.error = 0

    }

    # Contains a list of monitored cluster nodes. The same list can (should) be supplied on all nodes so that
    # each node monitors all others. Based on the priority (lowest wins) at least one node will start to
    # alert an administrator if the cluster starts to fail.
    cluster {

        # Determines the node priority. The node which has the lowest priority (and is not failing) has to
        # notify the administrator.
        priority = 100

        # Contains a list of endpoints (http://url:port) which should be monitored
        nodes = [ ]

        # Types of alerts triggered, once the system is unhappy
        alerts {
            # Enter a server here in the form of: http://server:port - This will be used to
            # relay the alert to another system
            gateway = ""

            # Enter a shared secret here. This is used to send and receive alerts via a gateway. (Secret needs to
            # be the same and not empty for two nodes to work together).
            gatewaySecret = ""

            # Notifies users listed here per mail. Enter mail addresses as strings like "a@test.xyz", "b@test.xyz"...
            mail = [ ]
        }
    }

    # Configuration for notifications via HipChat
    hipchat {
        # Contains the default URL of the HipChat message service
        messageUrl = "https://api.hipchat.com/v1/rooms/message"

        # Place your HipChat auth token here
        authToken = ""

        # Select the target room here
        room = ""

        # Select the sender name here - leave empty to use the product name
        sender = ""

        # Determines which message type to send to hip chat. Types are:
        #    start    - Start of the node
        #    stop     - Stop of a node
        #    cluster  - Cluster related messages
        #    metric   - Report yellow or red metrics
        #    incident - Report of an incident
        types = [ "start", "stop", "cluster", "incident", "metric" ]
    }
}

# Contains settings used by the content generator (sirius.web.templates.Content).
content {
    # Sets the javax.scripting engine used to execute JavaScript
    script-engine = "js"

    # Enumerates all marco libraries which are auto-loaded on startup
    velocity-libraries {
        standard = "velocity/standard.vm"
    }
}

# Defines database connectivity settings
jdbc {

    # A profile provides a template for database connections.
    # Each value of the profile serves as backup or default value for the one in the database secion.
    # Also a profile value can reference properties defined in one of both sections like this: ${name}.
    # The url property of the mysql profile (below) is an example.
    profile {
        # The default profile only declares connection management properties. These can be overridden in the
        # actual database section.
        default {
            # Number of connections initially opened
            initialSize = 0

            # Maximal number of open connections
            maxActive = 10

            # Maximal number of open unused connections
            maxIdle = 1

            # Validation query used to determine the fitness of a connection
            validationQuery = ""
        }

        # The mysql profile declares common settings to connect to a MySQL database.
        # As the url is autogenerated, only the host and the database name need to be defined. By default 'host'
        # will be 'localhost'.
        mysql {
            driver = "com.mysql.jdbc.Driver"
            url = "jdbc:mysql://${host}:${port}/${database}?autoReconnect=true"
            host = "localhost"
            port = "3306"
            validationQuery = "SELECT 1"
        }
    }

    # Defines JDBC database connections used by the system. Use Database.get("name") to obtain a connection
    # defined here.
    database {

        # Basic sample configuration to illustrate all properties
        # sample {
        #    driver = "my.jdbc.driver.Class"
        #    url = "jdbc:mydb://..."
        #    user = ""
        #    password = ""
        #    initialSize = 0
        #    maxActive = 10
        #    maxIdle = 1
        #    validationQuery = ""
        # }

        # Use the mysql profile (defined above) to connect to a MySQL database
        # sample-mysql {
        #    # apply profile
        #    profile = "mysql"
        #
        #    # specify a user
        #    user = "test"
        #
        #    # and a password
        #    password = "test"
        #
        #    # Specify the name of the database to connect to
        #    database = "testdb"
        #
        #    # Specify the host to connect to or leave empty to connect to "localhost"
        #    host = "somehost"
        # }
    }
}

# Make velocity not too chatty (the log4j name is 'velocity')
logging.velocity=WARN

# Contains the mail configuration used to send and receive mails
mail {
    # Used as X-MAILER header...
    mailer = "SIRIUS Java Library"

    # Configuration used to send mails. You should at least change host, sender and senderName!
    # As long as host is empty, no mail will be sent (not even tried)...
    smtp {

        # Host of the SMTP server
        host = ""

        # Port used by the SMTP server
        port = 25

        # Username used to authenticate at the SMTP server
        user = ""

        # Password used to authenticate at the SMTP server
        password = ""

        # Default address used as "From:" if no other address is given
        sender = ""

        # Default name of the "From:" if no name is given
        senderName = ""
    }

    # Contains templates
    # A template can contain a "subject", a "text" which points to a velocity file to be evaluated as well as a
    # "html" property which points to a velocity macro generating the html content of the mail (optional).
    # Additionally an "attachments" object can be defined in which each sub object wil create an attachment for the
    # mail. Each of these sub objects can specify a "template" which names to file used to generate the content
    # and a "fileName" will generates the file name for the attachment. If no fileName is given, the name (key)
    # will be used, where the last '-' is replaced by a '.'. Therefore test-pdf generates test.pdf as filename.
    #
    # Both subject and fileName can contain velocity template sources which will be evaluated.
    templates {

        # Used to notify an administrator, that one or several nodes are misbehaving.
        system-alert {
            subject = "WARNING: $app on $node is in state: $nodeState / Cluster is in state: $clusterState"
            text = "mail/system/alert.vm"
            html = "mail/system/alert-html.vm"
        }

    }
}

# Defines the user management used by the application
security {

    public-roles = []

    # Declares which scope types are known to the system and which user manager they use. Multiple scopes can be
    # defined i.e. to differentiate between a user logged into an administration area vs. a user logged into the
    # frontend of the application. To control which scope is active, the interface ScopeDetector has to be
    # implemented and registered using @Register. By default the scope "default" is used for all requests.
    scopes {

        # Defines the manager used by the default scope.
        default {

            # Determines which user manager to use. By default the "public" user manager is used, which grants
            # all permissions without requiring a login. Use "config" to switch to users defined in the
            # system configuration or create your own by implementing UserManagerFactory and UserManager.
            manager = "public"

            default-roles = "*"

        }

    }

    # Defines a list of all known permissions for reporting reasons
    permissions {
        flag-logged-in : "Determines if an authorized user is present"
    }

    # Declares profiles. Profiles are meta permissions which represent a set of permissions. Once a user is
    # authorized, its permissions which reference profiles will be expanded automatically. This can be used to declare
    # permissions like "admin" which represent a multitude of permissions (which also might change over time).
    profiles {
        # template : [ "permission1", "permission2" ]
    }

    # Lists all users known to the configuration based user manager. To access this set the "manager" property
    # of the target scope to "config".
    users {

        # Defines a template user to show which fiels to declare. This user won't be able to log in, since its
        # passwordHash is empty.
        template {
            # Contains the name of the user.
            name : "Template User"

            # Contains the email address of the user.
            email : "someone@domain.com"

            # Enumerate all permissions given to this user. Permissions will be expanded using profiles.
            permissions: [ "some-role" ]

            # Provide a random salt used to compute the password hash
            salt : "5c29b8313cd04667c303b4d9950922a0"

            # Use MD5(salt + password) to compute the value for password hash
            # An MD5 function is available on every decent OS or via the web console
            passwordHash : ""
        }
    }
}

