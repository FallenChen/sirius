<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Made with all the love in the world
  ~ by scireum in Remshalden, Germany
  ~
  ~ Copyright by scireum GmbH
  ~ http://www.scireum.de - info@scireum.de
  -->
<!--
    Build Template for SIRIUS projects

    Include this file in the main build file, setup all properties and invoke:
     * ivy  - to update all dependencies
     * make - to build a release version of the application

    You must specify the following properties:
     * app.name - Name of the application
     * app.filename - File-compatible name of the app

    You can set app.version (otherwise it will use a 4-digit date code)
     * app.version - Current version of the app
    You can also set app.build, which will then be appended to the version:
     * app.build - Current build number used


    You can provide: no-app, no-web or no-kernel to disable the respective modules.
-->
<project name="sirius" default="ivy" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:artifact="antlib:org.apache.maven.artifact.ant">


    <!-- =========================================================================================================== -->
    <!-- Directries and paths.... -->
    <!-- =========================================================================================================== -->
    <!-- Path to the build directory of the main project -->
    <property name="build.dir" value="."/>

    <!-- Path to the main project (contains the src and resources directories -->
    <property name="main.dir" value=".."/>

    <!-- Path to the target distribution directory of the main project -->
    <property name="dist.dir" value="${build.dir}/dist"/>

    <!-- Path to the directory containing the website -->
    <property name="site.dir" value="${build.dir}/site"/>

    <!-- Path to directory which contains sirius -->
    <property name="sirius.dir" value="${build.dir}/../sirius"/>

    <!-- Path to the test directory of the main project -->
    <property name="test.dir" value="${build.dir}/test"/>

    <!-- Path to the test report directory of the main project -->
    <property name="test.report.dir" value="${build.dir}/test/report"/>

    <!-- Prepare classpath -->
    <path id="compile.path">
        <fileset dir="${dist.dir}/lib" includes="*.jar"/>
        <pathelement path="${dist.dir}/app" />
    </path>

    <!-- Prepare test classpaths -->
    <path id="test.path">
        <path refid="compile.path"/>
        <fileset dir="${main.dir}/build/testlib" includes="*.jar"/>
    </path>

    <path id="test.path.kernel">
        <path refid="compile.path"/>
        <fileset dir="${main.dir}/build/testlib" includes="*.jar"/>
    </path>

    <path id="test.path.web">
        <path refid="test.path.kernel"/>
        <pathelement path="${test.dir}/kernel"/>
    </path>

    <path id="test.path.app">
        <path refid="test.path.web"/>
        <pathelement path="${test.dir}/web"/>
    </path>

    <path id="test.path.search">
        <path refid="test.path.web"/>
        <pathelement path="${test.dir}/web"/>
    </path>

    <path id="test.path.main-app">
        <path refid="test.path.web"/>
        <pathelement path="${test.dir}/web"/>
        <pathelement path="${test.dir}/app"/>
        <pathelement path="${test.dir}/search"/>
    </path>

    <!-- =========================================================================================================== -->
    <!-- Used to auto-install ivy -->
    <!-- =========================================================================================================== -->
    <property name="ivy.jar.version" value="2.1.0"/>
    <property name="ivy.jar.name" value="ivy-${ivy.jar.version}.jar"/>
    <property name="ivy.home" value="${user.home}/.ivy2"/>

    <!-- =========================================================================================================== -->
    <!-- Check if ivy is present -->
    <!-- =========================================================================================================== -->
    <available property="ivy.installed" file="${ivy.home}/${ivy.jar.name}"/>

    <!-- =========================================================================================================== -->
    <!-- Downloads and installs ivy -->
    <!-- =========================================================================================================== -->
    <target name="ivy-install" unless="ivy.installed" description="Downloads and installs ivy">
        <mkdir dir="${ivy.home}"/>
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.jar.version}/${ivy.jar.name}"
             dest="${ivy.home}/${ivy.jar.name}"/>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Checks if ivy is present or downloads it otherwise -->
    <!-- =========================================================================================================== -->
    <target name="ivy-init" depends="ivy-install" description="Checks if ivy is present or downloads it otherwise">
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant"
                 classpath="${ivy.home}/${ivy.jar.name}"/>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Runs ivy to resolve and retrieve all dependencies -->
    <!-- =========================================================================================================== -->
    <target name="ivy" depends="ivy-init" description="Runs ivy to resolve and retrieve all dependencies">
        <mkdir dir="${build.dir}/lib"/>
        <delete>
            <fileset dir="${build.dir}/lib">
                <include name="**/*"/>
            </fileset>
        </delete>
        <ivy:resolve file="${build.dir}/ivy.xml" />
        <ivy:retrieve conf="compile" />
        <ivy:retrieve pattern="${build.dir}/testlib/[artifact].[ext]" conf="test"/>
        <ivy:report todir="${build.dir}/lib/report" conf="compile" graph="false" />
    </target>

    <!-- =========================================================================================================== -->
    <!-- Generates app.version using a 4 digit date code and appending the jenkins BUILD number if available -->
    <!-- =========================================================================================================== -->
    <condition property="hasBuild">
        <isset property="app.build" />
    </condition>

    <target name="genDateCode">
        <tstamp>
            <format property="dateCode" pattern="yyww" />
        </tstamp>
    </target>
    <target name="makeVersionA" depends="genDateCode" if="hasBuild">
        <property name="app.version" value="${dateCode}-${app.build}" />
    </target>
    <target name="makeVersionB" depends="genDateCode" unless="hasBuild">
        <property name="app.version" value="${dateCode}" />
    </target>

    <!-- =========================================================================================================== -->
    <!-- Test -->
    <!-- =========================================================================================================== -->
    <target name="build-prepare" depends="ivy, makeVersionA, makeVersionB" description="prepare directory structure for build">
        <mkdir dir="${dist.dir}" />
        <delete failonerror="false">
            <fileset dir="${dist.dir}">
                <include name="**/*"/>
            </fileset>
        </delete>

        <!-- Copy libraries there -->
        <mkdir dir="${dist.dir}/lib" />
        <copy todir="${dist.dir}/lib">
            <fileset dir="${build.dir}/lib">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!-- Copy libraries not managed by ivy/maven -->
        <copy todir="${dist.dir}/lib">
            <fileset dir="${sirius.dir}/build/unmanaged-lib">
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy todir="${dist.dir}/lib">
            <fileset dir="${build.dir}/unmanaged-lib">
                <include name="**/*"/>
            </fileset>
        </copy>
        <mkdir dir="${dist.dir}/app" />
    </target>

    <target name="test-prepare" depends="ivy, makeVersionA, makeVersionB, build-prepare" description="prepare directory structure for automated tests">
        <!-- Initialize destination for test classes + resources -->
        <delete failonerror="false">
            <fileset dir="${test.dir}">
                <include name="**/*"/>
            </fileset>
        </delete>
        <mkdir dir="${test.dir}" />
        <delete failonerror="false">
            <fileset dir="${test.report.dir}">
                <include name="**/*"/>
            </fileset>
        </delete>
        <mkdir dir="${test.report.dir}" />
    </target>

    <taskdef
            name="groovyc"
            classname="org.codehaus.groovy.ant.Groovyc"
            classpathref="test.path" />

    <taskdef name="junit"
             classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
        <classpath refid="test.path"/>
    </taskdef>

    <target name="test" depends="test-kernel, test-web, test-app, test-search, test-main-app" description="run all automated tests"/>

    <target name="test-prepare-module">
        <delete failonerror="false">
            <fileset dir="${test.dir}/${module.name}">
                <include name="**/*"/>
            </fileset>
        </delete>
        <mkdir dir="${test.dir}/${module.name}" />
        <delete failonerror="false">
            <fileset dir="${test.report.dir}/${module.name}">
                <include name="**/*"/>
            </fileset>
        </delete>
        <mkdir dir="${test.report.dir}/${module.name}" />
    </target>

    <target name="test-compile-module">
        <groovyc fork="true"
                 destdir="${test.dir}/${module.name}"
                 includeantruntime="false"
                 encoding="UTF-8"
                 failonerror="true"
                 classpathref="module.test.path" >
            <src path="${module.home}/test"/>
            <javac debug="on">
                <compilerarg value="-Xlint:deprecation"/>
            </javac>
        </groovyc>
    </target>

    <target name="test-module">
        <junit fork="yes" dir="${dist.dir}" printsummary="yes" haltonfailure="yes">
            <formatter type="brief" usefile="false" />
            <formatter type="xml"/>
            <classpath >
                <path refid="module.test.path"/>
                <pathelement location="${test.dir}/${module.name}" />
            </classpath>
            <batchtest fork="yes" todir="${test.report.dir}/${module.name}" >
                <fileset dir="${test.dir}/${module.name}">
                    <include name="**/*Suite.class" />
                    <!--<include name="**/*Test.class" />-->
                    <!--<include name="**/*Spec.class" />-->
                </fileset>
            </batchtest>
        </junit>
    </target>
    <!-- =========================================================================================================== -->
    <!-- Builds and bundles the complete application for distribution -->
    <!-- =========================================================================================================== -->
    <target name="make" depends="ivy,makeVersionA,makeVersionB" description="Builds and bundles the complete application for distribution ">

        <!-- Create distribution directory -->
        <mkdir dir="${dist.dir}" />
        <delete>
            <fileset dir="${dist.dir}">
                <include name="**/*"/>
            </fileset>
        </delete>

        <!-- Copy libraries there -->
        <mkdir dir="${dist.dir}/lib" />
        <copy todir="${dist.dir}/lib">
            <fileset dir="${build.dir}/lib">
                <include name="**/*"/>
            </fileset>
        </copy>
        <!-- Copy libraries not managed by ivy/maven -->
        <copy todir="${dist.dir}/lib">
            <fileset dir="${sirius.dir}/build/unmanaged-lib">
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy todir="${dist.dir}/lib">
            <fileset dir="${build.dir}/unmanaged-lib">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!-- Create destination for classes + resources -->
        <mkdir dir="${dist.dir}/app" />
        <antcall target="make-kernel" />
        <antcall target="make-web" />
        <antcall target="make-app" />
        <antcall target="make-search" />
        <antcall target="make-main-app" />

        <!-- Replace version number and product name in config and html files -->
        <replace dir="${dist.dir}/app"
                 token="@PRODUCT@"
                 value="${app.name}">
            <include name="*.conf" />
            <include name="**/*.html" />
         </replace>
        <replace dir="${dist.dir}/app"
                 token="@VERSION@"
                 value="${app.version}">
            <include name="*.conf" />
            <include name="**/*.html" />
        </replace>
        <replace dir="${dist.dir}/app"
                 token="@PRODUCT_FILE_NAME@"
                 value="${app.filename}"
                 includes="conf">
            <include name="*.conf" />
            <include name="**/*.html" />
        </replace>

        <!-- Make love (and a .zip) -->
        <zip destfile="${dist.dir}/${app.filename}.zip" basedir="${dist.dir}" />
        <copy file="${dist.dir}/${app.filename}.zip" todir="${site.dir}" />

        <!-- Replace version number and product name in the generate site -->
        <replace dir="${site.dir}"
                 token="@PRODUCT@"
                 value="${app.name}">
            <include name="**/*.html" />
        </replace>
        <replace dir="${site.dir}"
                 token="@VERSION@"
                 value="${app.version}">
            <include name="**/*.html" />
        </replace>
        <replace dir="${site.dir}"
                 token="@PRODUCT_FILE_NAME@"
                 value="${app.filename}">
            <include name="**/*.html" />
        </replace>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Compiles the kernel module -->
    <!-- =========================================================================================================== -->
    <target name="make-kernel" unless="no-kernel">
        <javac compiler="javac1.7"
               includeantruntime="false"
               classpathref="compile.path"
               encoding="UTF-8"
               debug="on"
               destdir="${dist.dir}/app">
            <src path="${sirius.dir}/kernel/src"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
        <copy todir="${dist.dir}/app">
            <fileset dir="${sirius.dir}/kernel/src" excludes="**/*.java"/>
            <fileset dir="${sirius.dir}/kernel/resources" excludes="**/*.java"/>
        </copy>
        <copy todir="${dist.dir}">
            <fileset file="${dist.dir}/app/IPL.class" />
        </copy>
        <copy todir="${dist.dir}">
            <fileset dir="${sirius.dir}/kernel/dist" />
        </copy>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Tests the kernel module -->
    <!-- =========================================================================================================== -->
    <!-- test-prepare does not run with 'unless="no-kernel"' so builds can refer to each other in classpath-->
    <target name="test-prepare-kernel" depends="test-prepare" description="prepare directory structure for kernel tests">
        <antcall target="test-prepare-module">
            <param name="module.name" value="kernel"/>
        </antcall>
    </target>

    <target name="test-compile-kernel" depends="test-prepare-kernel, make-kernel"  unless="no-kernel" description="compiles the kernel test classes">
        <antcall target="test-compile-module">
            <param name="module.name" value="kernel"/>
            <param name="module.home" value="${sirius.dir}/kernel"/>
            <reference refid="test.path.kernel" torefid="module.test.path"/>
        </antcall>
    </target>

    <target name="test-kernel" depends="test-compile-kernel" unless="no-kernel" description="run automated tests for kernel">
        <antcall target="test-module">
            <param name="module.name" value="kernel"/>
            <reference refid="test.path.kernel" torefid="module.test.path"/>
        </antcall>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Compiles the web module -->
    <!-- =========================================================================================================== -->
    <target name="make-web" unless="no-web">
        <javac compiler="javac1.7"
               includeantruntime="false"
               classpathref="compile.path"
               encoding="UTF-8"
               debug="on"
               destdir="${dist.dir}/app">
            <src path="${sirius.dir}/web/src"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
        <copy todir="${dist.dir}/app">
            <fileset dir="${sirius.dir}/web/src" excludes="**/*.java"/>
            <fileset dir="${sirius.dir}/web/resources" excludes="**/*.java"/>
        </copy>
        <copy todir="${dist.dir}">
            <fileset dir="${sirius.dir}/web/dist" />
        </copy>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Tests the web module -->
    <!-- =========================================================================================================== -->
    <!-- test-prepare does not run with 'unless="no-web"' so builds can refer to each other in classpath-->
    <target name="test-prepare-web" depends="test-prepare" description="prepare directory structure for web tests">
        <antcall target="test-prepare-module">
            <param name="module.name" value="web"/>
        </antcall>
    </target>

    <target name="test-compile-web" depends="test-prepare-web, make-web"  unless="no-web" description="compiles the web test classes">
        <antcall target="test-compile-module">
            <param name="module.name" value="web"/>
            <param name="module.home" value="${sirius.dir}/web"/>
            <reference refid="test.path.web" torefid="module.test.path"/>
        </antcall>
    </target>

    <target name="test-web" depends="test-compile-web" unless="no-web" description="run automated tests for web">
        <antcall target="test-module">
            <param name="module.name" value="web"/>
            <reference refid="test.path.web" torefid="module.test.path"/>
        </antcall>
    </target>
    <!-- =========================================================================================================== -->
    <!-- Compiles the app module -->
    <!-- =========================================================================================================== -->
    <target name="make-app" unless="no-app">
        <copy todir="${dist.dir}/lib">
            <fileset dir="${sirius.dir}/build/unmanaged-app-lib">
                <include name="**/*"/>
            </fileset>
        </copy>

        <javac compiler="javac1.7"
               includeantruntime="false"
               classpathref="compile.path"
               encoding="UTF-8"
               debug="on"
               destdir="${dist.dir}/app">
            <src path="${sirius.dir}/app/src"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
        <copy todir="${dist.dir}/app">
            <fileset dir="${sirius.dir}/app/src" excludes="**/*.java"/>
            <fileset dir="${sirius.dir}/app/resources" excludes="**/*.java"/>
        </copy>
        <copy todir="${dist.dir}">
            <fileset dir="${sirius.dir}/app/dist" />
        </copy>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Tests the app module -->
    <!-- =========================================================================================================== -->
    <!-- test-prepare does not run with 'unless="no-web"' so builds can refer to each other in classpath-->
    <target name="test-prepare-app" depends="test-prepare" description="prepare directory structure for app tests">
        <antcall target="test-prepare-module">
            <param name="module.name" value="app"/>
        </antcall>
    </target>

    <target name="test-compile-app" depends="test-prepare-app, make-app"  unless="no-app" description="compiles the app test classes">
        <antcall target="test-compile-module">
            <param name="module.name" value="app"/>
            <param name="module.home" value="${sirius.dir}/app"/>
            <reference refid="test.path.app" torefid="module.test.path"/>
        </antcall>
    </target>

    <target name="test-app" depends="test-compile-app" unless="no-app" description="run automated tests for app">
        <antcall target="test-module">
            <param name="module.name" value="app"/>
            <reference refid="test.path.app" torefid="module.test.path"/>
        </antcall>
    </target>
    <!-- =========================================================================================================== -->
    <!-- Compiles the search module -->
    <!-- =========================================================================================================== -->
    <target name="make-search" unless="no-search">
        <javac compiler="javac1.7"
               includeantruntime="false"
               classpathref="compile.path"
               encoding="UTF-8"
               debug="on"
               destdir="${dist.dir}/app">
            <src path="${sirius.dir}/search/src"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
        <copy todir="${dist.dir}/app">
            <fileset dir="${sirius.dir}/search/src" excludes="**/*.java"/>
            <fileset dir="${sirius.dir}/search/resources" excludes="**/*.java"/>
        </copy>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Tests the search module -->
    <!-- =========================================================================================================== -->
    <!-- test-prepare does not run with 'unless="no-search"' so builds can refer to each other in classpath-->
    <target name="test-prepare-search" depends="test-prepare" description="prepare directory structure for search tests">
        <antcall target="test-prepare-module">
            <param name="module.name" value="search"/>
        </antcall>
    </target>

    <target name="test-compile-search" depends="test-prepare-search, make-search"  unless="no-search" description="compiles the search test classes">
        <antcall target="test-compile-module">
            <param name="module.name" value="search"/>
            <param name="module.home" value="${sirius.dir}/search"/>
            <reference refid="test.path.search" torefid="module.test.path"/>
        </antcall>
    </target>

    <target name="test-search" depends="test-compile-search" unless="no-search" description="run automated tests for search">
        <antcall target="test-module">
            <param name="module.name" value="search"/>
            <reference refid="test.path.search" torefid="module.test.path"/>
        </antcall>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Compiles the main application -->
    <!-- =========================================================================================================== -->
    <target name="make-main-app">
        <javac compiler="javac1.7"
               includeantruntime="false"
               classpathref="compile.path"
               encoding="UTF-8"
               debug="on"
               destdir="${dist.dir}/app">
            <src path="${main.dir}/src"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
        <copy todir="${dist.dir}/app" failonerror="false">
            <fileset dir="${main.dir}/src" excludes="**/*.java"/>
            <fileset dir="${main.dir}/resources" excludes="**/*.java"/>
        </copy>
        <copy todir="${dist.dir}" failonerror="false">
            <fileset dir="${main.dir}/dist" />
        </copy>
        <copy todir="${site.dir}" failonerror="false">
            <fileset dir="${main.dir}/site" />
        </copy>
        <mkdir dir="${site.dir}/docs" />
        <javadoc sourcepath="${main.dir}/src" destdir="${site.dir}/docs" classpathref="compile.path" />
    </target>

    <!-- =========================================================================================================== -->
    <!-- Tests the main application module -->
    <!-- =========================================================================================================== -->
    <target name="test-prepare-main-app" depends="test-prepare" description="prepare directory structure for main-app tests">
        <antcall target="test-prepare-module">
            <param name="module.name" value="main-app"/>
        </antcall>
    </target>

    <target name="test-compile-main-app" depends="test-prepare-main-app, make-main-app"  description="compiles the main-app test classes">
        <antcall target="test-compile-module">
            <param name="module.name" value="main-app"/>
            <param name="module.home" value="${main.dir}"/>
            <reference refid="test.path.main-app" torefid="module.test.path"/>
        </antcall>
    </target>

    <target name="test-main-app" depends="test-compile-main-app" description="run automated tests for main-app">
        <antcall target="test-module">
            <param name="module.name" value="main-app"/>
            <reference refid="test.path.main-app" torefid="module.test.path"/>
        </antcall>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Generates the javadocs for the sirius-lib.net site -->
    <!-- =========================================================================================================== -->
    <target name="sirius-site" depends="make" description="Generates the javadocs for the sirius-lib.net site">
        <!-- Create distribution directory -->
        <mkdir dir="${sirius.dir}/site/docs" />
        <delete>
            <fileset dir="${sirius.dir}/site/docs">
                <include name="**/*"/>
            </fileset>
        </delete>

        <javadoc destdir="${sirius.dir}/site/docs" classpathref="compile.path">
            <fileset dir="${sirius.dir}/kernel/src" />
            <fileset dir="${sirius.dir}/web/src" />
            <fileset dir="${sirius.dir}/app/src" />
        </javadoc>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Used to auto-install mvn -->
    <!-- =========================================================================================================== -->
    <property name="mvn.jar.version" value="2.1.3"/>
    <property name="mvn.jar.name" value="maven-ant-tasks-${mvn.jar.version}.jar"/>
    <property name="mvn.home" value="${user.home}/.m2"/>

    <!-- =========================================================================================================== -->
    <!-- Check if mvn is present -->
    <!-- =========================================================================================================== -->
    <available property="mvn.installed" file="${mvn.home}/${mvn.jar.name}"/>

    <!-- =========================================================================================================== -->
    <!-- Downloads and installs mvn -->
    <!-- =========================================================================================================== -->
    <target name="mvn-install" unless="mvn.installed" description="Downloads and installs mvn">
        <mkdir dir="${mvn.home}"/>
        <get src="http://ftp-stud.hs-esslingen.de/pub/Mirrors/ftp.apache.org/dist/maven/ant-tasks/${mvn.jar.version}/binaries/${mvn.jar.name}"
             dest="${mvn.home}/${mvn.jar.name}"/>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Checks if mvn is present or downloads it otherwise -->
    <!-- =========================================================================================================== -->
    <target name="mvn-init" depends="mvn-install" description="Checks if mvn is present or downloads it otherwise">
        <taskdef resource="org/apache/maven/artifact/ant/antlib.xml"
                 uri="antlib:org.apache.maven.artifact.ant"
                 classpath="${mvn.home}/${mvn.jar.name}"/>
    </target>



    <!-- =========================================================================================================== -->
    <!-- Generates a maven artifact -->
    <!-- =========================================================================================================== -->
    <target name="maven-prepare" depends="mvn-init,make" description="Generates a maven artifact">
        <ivy:makepom ivyfile="${build.dir}/ivy.xml" pomfile="${build.dir}/pom.xml" />
        <jar destfile="${dist.dir}/${app.filename}.jar" basedir="${dist.dir}/app" />
        <jar destfile="${dist.dir}/${app.filename}-javadoc.jar" basedir="${site.dir}/docs" />
    </target>

    <!-- =========================================================================================================== -->
    <!-- Deploy snapshot version to Maven snapshot repository -->
    <!-- =========================================================================================================== -->
    <target name="mvn-deploy" depends="maven-prepare" description="deploy snapshot version to Maven snapshot repository">
        <artifact:mvn>
            <arg value="org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file" />
            <arg value="-Durl=${maven-snapshots-repository-url}" />
            <arg value="-DrepositoryId=${maven-snapshots-repository-id}" />
            <arg value="-DpomFile=pom.xml" />
            <arg value="-Dfile=${dist.dir}/${app.filename}.jar" />
        </artifact:mvn>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Deploy release version to Maven staging repository -->
    <!-- before this, update project version (both build.xml and pom.xml) from SNAPSHOT to RELEASE -->
    <!-- =========================================================================================================== -->
    <target name="mvn-stage" depends="maven-prepare" description="deploy release version to Maven staging repository">
        <!-- sign and deploy the main artifact -->
        <artifact:mvn>
            <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
            <arg value="-Durl=${maven-staging-repository-url}" />
            <arg value="-DrepositoryId=${maven-staging-repository-id}" />
            <arg value="-DpomFile=pom.xml" />
            <arg value="-Dfile=${dist.dir}/${app.filename}.jar" />
            <arg value="-Pgpg" />
        </artifact:mvn>

        <!-- sign and deploy the javadoc artifact -->
        <artifact:mvn>
            <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
            <arg value="-Durl=${maven-staging-repository-url}" />
            <arg value="-DrepositoryId=${maven-staging-repository-id}" />
            <arg value="-DpomFile=pom.xml" />
            <arg value="-Dfile=${dist.dir}/${app.filename}-javadoc.jar" />
            <arg value="-Dclassifier=javadoc" />
            <arg value="-Pgpg" />
        </artifact:mvn>
    </target>

</project>
