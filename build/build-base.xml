<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Made with all the love in the world
  ~ by scireum in Remshalden, Germany
  ~
  ~ Copyright by scireum GmbH
  ~ http://www.scireum.de - info@scireum.de
  -->
<!--
    Build Template for SIRIUS projects

    Include this file in the main build file, setup all properties and invoke:
     * ivy  - to update all dependencies
     * make - to build a release version of the application

    You must specify the following properties:
     * app.name - Name of the application
     * app.version - Current version of the app
     * app.filename - File-compatible name of the app

    You can provide: no-app, no-web or no-kernel to disable the respective modules.

-->
<project name="sirius" default="ivy" xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- =========================================================================================================== -->
    <!-- Directries and paths.... -->
    <!-- =========================================================================================================== -->
    <!-- Path to the build directory of the main project -->
    <property name="build.dir" value="."/>

    <!-- Path to the main project (contains the src and resources directories -->
    <property name="main.dir" value=".."/>

    <!-- Path to the target distribution directory of the main project -->
    <property name="dist.dir" value="${build.dir}/dist"/>

    <!-- Path to the directory containing the website -->
    <property name="site.dir" value="${build.dir}/site"/>

    <!-- Path to directory which contains sirius -->
    <property name="sirius.dir" value="${build.dir}/../sirius"/>

    <!-- Prepare classpath -->
    <path id="compile.path">
        <fileset dir="${dist.dir}/lib" includes="*.jar"/>
        <pathelement path="${dist.dir}/app" />
    </path>

    <!-- =========================================================================================================== -->
    <!-- Used to auto-install ivy -->
    <!-- =========================================================================================================== -->
    <property name="ivy.jar.version" value="2.1.0"/>
    <property name="ivy.jar.name" value="ivy-${ivy.jar.version}.jar"/>
    <property name="ivy.home" value="${user.home}/.ivy2"/>

    <!-- =========================================================================================================== -->
    <!-- Check if ivy is present -->
    <!-- =========================================================================================================== -->
    <available property="ivy.installed" file="${ivy.home}/${ivy.jar.name}"/>

    <!-- =========================================================================================================== -->
    <!-- Downloads and installs ivy -->
    <!-- =========================================================================================================== -->
    <target name="ivy-install" unless="ivy.installed">
        <mkdir dir="${ivy.home}"/>
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.jar.version}/${ivy.jar.name}"
             dest="${ivy.home}/${ivy.jar.name}"/>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Checks if ivy is present or downloads it otherwise -->
    <!-- =========================================================================================================== -->
    <target name="ivy-init" depends="ivy-install">
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant"
                 classpath="${ivy.home}/${ivy.jar.name}"/>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Runs ivy to resolve and retrieve all dependencies -->
    <!-- =========================================================================================================== -->
    <target name="ivy" depends="ivy-init">
        <mkdir dir="${build.dir}/lib"/>
        <delete>
            <fileset dir="${build.dir}/lib">
                <include name="**/*"/>
            </fileset>
        </delete>
        <ivy:resolve file="${build.dir}/ivy.xml" />
        <ivy:retrieve/>
    </target>


    <target name="version" description="Sets app.version as production code style 4-digit-code: 2-digit year and 2-digit week in year" unless="hasVersion">
        <tstamp>
            <format property="app.version" pattern="yyww" />
        </tstamp>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Runs ivy to resolve and retrieve all dependencies -->
    <!-- =========================================================================================================== -->
    <target name="make" depends="ivy">
        <condition property="hasVersion">
            <length string="${app.version}" when="greater" length="0" />
        </condition>
        <antcall target="version" />

        <!-- Create distribution directory -->
        <mkdir dir="${dist.dir}" />
        <delete>
            <fileset dir="${dist.dir}">
                <include name="**/*"/>
            </fileset>
        </delete>

        <!-- Copy libraries there -->
        <mkdir dir="${dist.dir}/lib" />
        <copy todir="${dist.dir}/lib">
            <fileset dir="${build.dir}/lib">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!-- Create destination for classes + resources -->
        <mkdir dir="${dist.dir}/app" />
        <antcall target="make-kernel" />
        <antcall target="make-web" />
        <antcall target="make-app" />
        <antcall target="make-main-app" />

        <!-- Replace version number and product name in config files -->
        <replace dir="${dist.dir}/app"
                 token="@PRODUCT@"
                 value="${app.name}">
            <include name="*.conf" />
         </replace>
        <replace dir="${dist.dir}/app"
                 token="@VERSION@"
                 value="${app.version}">
            <include name="*.conf" />
        </replace>
        <replace dir="${dist.dir}/app"
                 token="@PRODUCT_FILE_NAME@"
                 value="${app.filename}"
                 includes="conf">
            <include name="*.conf" />
        </replace>

        <!-- Make love (and a .zip) -->
        <zip destfile="${dist.dir}/${app.filename}.zip" basedir="${dist.dir}" />
        <copy file="${dist.dir}/${app.filename}.zip" todir="${site.dir}" />

        <!-- Replace version number and product name in the generate site -->
        <replace dir="${site.dir}"
                 token="@PRODUCT@"
                 value="${app.name}">
            <include name="**/*.html" />
        </replace>
        <replace dir="${site.dir}"
                 token="@VERSION@"
                 value="${app.version}">
            <include name="**/*.html" />
        </replace>
        <replace dir="${site.dir}"
                 token="@PRODUCT_FILE_NAME@"
                 value="${app.filename}">
            <include name="**/*.html" />
        </replace>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Compiles the kernel module -->
    <!-- =========================================================================================================== -->
    <target name="make-kernel" unless="no-kernel">
        <javac compiler="javac1.7"
               includeantruntime="false"
               classpathref="compile.path"
               encoding="UTF-8"
               debug="on"
               destdir="${dist.dir}/app">
            <src path="${sirius.dir}/kernel/src"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
        <copy todir="${dist.dir}/app">
            <fileset dir="${sirius.dir}/kernel/src" excludes="**/*.java"/>
            <fileset dir="${sirius.dir}/kernel/resources" excludes="**/*.java"/>
        </copy>
        <copy todir="${dist.dir}">
            <fileset file="${dist.dir}/app/IPL.class" />
        </copy>
        <copy todir="${dist.dir}">
            <fileset dir="${sirius.dir}/kernel/dist" />
        </copy>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Compiles the web module -->
    <!-- =========================================================================================================== -->
    <target name="make-web" unless="no-web">
        <javac compiler="javac1.7"
               includeantruntime="false"
               classpathref="compile.path"
               encoding="UTF-8"
               debug="on"
               destdir="${dist.dir}/app">
            <src path="${sirius.dir}/web/src"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
        <copy todir="${dist.dir}/app">
            <fileset dir="${sirius.dir}/web/src" excludes="**/*.java"/>
            <fileset dir="${sirius.dir}/web/resources" excludes="**/*.java"/>
        </copy>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Compiles the app module -->
    <!-- =========================================================================================================== -->
    <target name="make-app" unless="no-app">
        <javac compiler="javac1.7"
               includeantruntime="false"
               classpathref="compile.path"
               encoding="UTF-8"
               debug="on"
               destdir="${dist.dir}/app">
            <src path="${sirius.dir}/app/src"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
        <copy todir="${dist.dir}/app">
            <fileset dir="${sirius.dir}/app/src" excludes="**/*.java"/>
            <fileset dir="${sirius.dir}/app/resources" excludes="**/*.java"/>
        </copy>
        <copy todir="${dist.dir}">
            <fileset dir="${sirius.dir}/app/dist" />
        </copy>
    </target>

    <!-- =========================================================================================================== -->
    <!-- Compiles the main application -->
    <!-- =========================================================================================================== -->
    <target name="make-main-app">
        <javac compiler="javac1.7"
               includeantruntime="false"
               classpathref="compile.path"
               encoding="UTF-8"
               debug="on"
               destdir="${dist.dir}/app">
            <src path="${main.dir}/src"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
        <copy todir="${dist.dir}/app" failonerror="false">
            <fileset dir="${main.dir}/src" excludes="**/*.java"/>
            <fileset dir="${main.dir}/resources" excludes="**/*.java"/>
        </copy>
        <copy todir="${dist.dir}" failonerror="false">
            <fileset dir="${main.dir}/dist" />
        </copy>
        <copy todir="${site.dir}" failonerror="false">
            <fileset dir="${main.dir}/site" />
        </copy>
        <mkdir dir="${site.dir}/docs" />
        <javadoc sourcepath="${main.dir}/src" destdir="${site.dir}/docs" classpathref="compile.path" />
    </target>

    <!-- =========================================================================================================== -->
    <!-- Generates the javadocs for the sirius-lib.net site -->
    <!-- =========================================================================================================== -->
    <target name="sirius-site" depends="make">
        <!-- Create distribution directory -->
        <mkdir dir="${sirius.dir}/site/docs" />
        <delete>
            <fileset dir="${sirius.dir}/site/docs">
                <include name="**/*"/>
            </fileset>
        </delete>

        <javadoc destdir="${sirius.dir}/site/docs" classpathref="compile.path">
            <fileset dir="${sirius.dir}/kernel/src" />
            <fileset dir="${sirius.dir}/web/src" />
            <fileset dir="${sirius.dir}/app/src" />
        </javadoc>
    </target>
</project>
